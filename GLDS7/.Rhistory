knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=6, fig.height=5, fig.align = 'center')
setwd('~/Documents/HTML_R/GLDS7')
if(file.exists('iDEP_core_functions.R'))
source('iDEP_core_functions.R') else
source('https://raw.githubusercontent.com/iDEP-SDSU/idep/master/shinyapps/idep/iDEP_core_functions.R')
inputFile <- 'GLDS7_Expression.csv'
sampleInfoFile <- 'GLDS7_Sampleinfo.csv'
gldsMetadataFile <- 'GLDS7_Metadata.csv'
geneInfoFile <- 'Arabidopsis_thaliana__athaliana_eg_gene_GeneInfo.csv' #Gene symbols, location etc.
geneSetFile <- 'Arabidopsis_thaliana__athaliana_eg_gene.db'  # pathway database in SQL; can be GMT format
STRING10_speciesFile <- 'https://raw.githubusercontent.com/iDEP-SDSU/idep/master/shinyapps/idep/STRING10_species.csv'
input_missingValue <- 'geneMedian'	#Missing values imputation method
input_dataFileFormat <- 1	#1- read counts, 2 FKPM/RPKM or DNA microarray
input_minCounts <- 0.5	#Min counts
input_NminSamples <- 1	#Minimum number of samples
input_countsLogStart <- 4	#Pseudo count for log CPM
input_CountsTransform <- 1	#Methods for data transformation of counts. 1-EdgeR's logCPM 2-VST, 3-rlog
readMetadata.out <- readMetadata(gldsMetadataFile)
library(knitr)   #  install if needed. for showing tables with kable
library(kableExtra)
kable( readMetadata.out ) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
readData.out <- readData(inputFile)
kable( head(readData.out$data) ) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
readSampleInfo.out <- readSampleInfo(sampleInfoFile)
kable( readSampleInfo.out ) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
input_selectOrg ="NEW"
input_selectGO <- NULL 	#Gene set category
input_noIDConversion = TRUE
allGeneInfo.out <- geneInfo(geneInfoFile)
converted.out = NULL
convertedData.out <- convertedData()
nGenesFilter()
convertedCounts.out <- convertedCounts()  # converted counts, just for compatibility
# Read counts per library
parDefault = par()
par(mar=c(12,4,2,2))
# barplot of total read counts
x <- readData.out$rawCounts
groups = as.factor( detectGroups(colnames(x ) ) )
if(nlevels(groups)<=1 | nlevels(groups) >20 )
col1 = 'green'  else
col1 = rainbow(nlevels(groups))[ groups ]
barplot( colSums(x)/1e6,
col=col1,las=3, main="Total read counts (millions)")
readCountsBias()  # detecting bias in sequencing depth
# Box plot
x = readData.out$data
boxplot(x, las = 2, col=col1,
ylab='Transformed expression levels',
main='Distribution of transformed data')
#Density plot
par(parDefault)
densityPlot()
# Scatter plot of the first two samples
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2],
main='Scatter plot of first two samples')
####plot gene or gene family
input_selectOrg ="BestMatch"
input_geneSearch <- 'HOXA'	#Gene ID for searching
genePlot()
input_useSD <- 'FALSE'	#Use standard deviation instead of standard error in error bar?
geneBarPlotError()
# hierarchical clustering tree
x <- readData.out$data
maxGene <- apply(x,1,max)
# remove bottom 25% lowly expressed genes, which inflate the PPC
x <- x[which(maxGene > quantile(maxGene)[1] ) ,]
plot(as.dendrogram(hclust2( dist2(t(x)))), ylab="1 - Pearson C.C.", type = "rectangle")
#Correlation matrix
input_labelPCC <- TRUE	#Show correlation coefficient?
correlationMatrix()
# Parameters for heatmap
input_nGenes <- 1000	#Top genes for heatmap
input_geneCentering <- TRUE	#centering genes ?
input_sampleCentering <- FALSE	#Center by sample?
input_geneNormalize <- FALSE	#Normalize by gene?
input_sampleNormalize <- FALSE	#Normalize by sample?
input_noSampleClustering <- FALSE	#Use original sample order
input_heatmapCutoff <- 4	#Remove outliers beyond number of SDs
input_distFunctions <- 1	#which distant funciton to use
input_hclustFunctions <- 1	#Linkage type
input_heatColors1 <- 1	#Colors
input_selectFactorsHeatmap <- NULL 	#Sample coloring factors
png('heatmap.png', width = 10, height = 15, units = 'in', res = 300)
staticHeatmap()
dev.off()
heatmapPlotly() # interactive heatmap using Plotly
input_nGenesKNN <- 2000	#Number of genes fro k-Means
input_nClusters <- 4	#Number of clusters
maxGeneClustering = 12000
input_kmeansNormalization <- 'geneMean'	#Normalization
input_KmeansReRun <- 0	#Random seed
distributionSD()  #Distribution of standard deviations
KmeansNclusters()  #Number of clusters
Kmeans.out = Kmeans()   #Running K-means
KmeansHeatmap()   #Heatmap for k-Means
#Read gene sets for enrichment analysis
sqlite  <- dbDriver('SQLite')
input_selectGO3 <- NULL 	#Gene set category
input_minSetSize <- 15	#Min gene set size
input_maxSetSize <- 2000	#Max gene set size
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO3,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
# Alternatively, users can use their own GMT files by
#GeneSets.out <- readGMTRobust('somefile.GMT')
results <- KmeansGO()  #Enrichment analysis for k-Means clusters
results$adj.Pval <- format( results$adj.Pval,digits=3 )
kable( results, row.names=FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
input_seedTSNE <- 0	#Random seed for t-SNE
input_colorGenes <- TRUE	#Color genes in t-SNE plot?
tSNEgenePlot()  #Plot genes using t-SNE
input_selectFactors <- 'Sample_Name'	#Factor coded by color
input_selectFactors2 <- 'Sample_Name'	#Factor coded by shape
input_tsneSeed2 <- 0	#Random seed for t-SNE
#PCA, MDS and t-SNE plots
PCAplot()
MDSplot()
tSNEplot()
#Read gene sets for pathway analysis using PGSEA on principal components
input_selectGO6 <- 'GOBP'
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO6,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
PCApathway() # Run PGSEA analysis
cat( PCA2factor() )   #The correlation between PCs with factors
input_CountsDEGMethod <- 2	#DESeq2= 3,limma-voom=2,limma-trend=1
input_limmaPval <- 0.1	#FDR cutoff
input_limmaFC <- 2	#Fold-change cutoff
input_selectModelComprions <- 'Gravity: Microgravity vs. Terrestrial'	#Selected comparisons
input_selectFactorsModel <- 'Gravity'	#Selected comparisons
input_selectInteractions <- NULL 	#Selected comparisons
input_selectBlockFactorsModel <- NULL 	#Selected comparisons
factorReferenceLevels.out <- c('Gravity:Terrestrial')
limma.out <- limma()
DEG.data.out <- DEG.data()
limma.out$comparisons
input_selectComparisonsVenn = limma.out$comparisons[1:3] # use first three comparisons
input_UpDownRegulated <- FALSE	#Split up and down regulated genes
vennPlot() # Venn diagram
sigGeneStats() # number of DEGs as figure
sigGeneStatsTable() # number of DEGs as table
input_selectContrast <- 'Microgravity-Terrestrial'	#Selected comparisons
selectedHeatmap.data.out <- selectedHeatmap.data()
selectedHeatmap()   # heatmap for DEGs in selected comparison
# Save gene lists and data into files
write.csv( selectedHeatmap.data()$genes, 'heatmap.data.csv')
write.csv(DEG.data(),'DEG.data.csv' )
write(AllGeneListsGMT() ,'AllGeneListsGMT.gmt')
input_selectContrast <- 'Microgravity-Terrestrial'	#Selected comparisons
selectedHeatmap.data.out <- selectedHeatmap.data()
selectedHeatmap()   # heatmap for DEGs in selected comparison
# Save gene lists and data into files
write.csv( selectedHeatmap.data()$genes, 'heatmap.data.csv')
write.csv(DEG.data(),'DEG.data.csv' )
write(AllGeneListsGMT() ,'AllGeneListsGMT.gmt')
input_selectContrast <- 'Microgravity-Terrestrial'	#Selected comparisons
selectedHeatmap.data.out <- selectedHeatmap.data()
selectedHeatmap()   # heatmap for DEGs in selected comparison
# Save gene lists and data into files
write.csv( selectedHeatmap.data()$genes, 'heatmap.data.csv')
write.csv(DEG.data(),'DEG.data.csv' )
write(AllGeneListsGMT() ,'AllGeneListsGMT.gmt')
input_selectContrast <- 'Microgravity-Terrestrial'	#Selected comparisons
selectedHeatmap.data.out <- selectedHeatmap.data()
selectedHeatmap()   # heatmap for DEGs in selected comparison
# Save gene lists and data into files
write.csv( selectedHeatmap.data()$genes, 'heatmap.data.csv')
write.csv(DEG.data(),'DEG.data.csv' )
write(AllGeneListsGMT() ,'AllGeneListsGMT.gmt')
input_selectGO2 <- 'GOBP'	#Gene set category
geneListData.out <- geneListData()
volcanoPlot()
scatterPlot()
MAplot()
geneListGOTable.out <- geneListGOTable()
# Read pathway data again
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO2,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
input_removeRedudantSets <- TRUE	#Remove highly redundant gene sets?
results <- geneListGO()  #Enrichment analysis
results$adj.Pval <- format( results$adj.Pval,digits=3 )
kable( results, row.names=FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
input_selectGO2 <- 'GOBP'	#Gene set category
geneListData.out <- geneListData()
volcanoPlot()
c.out
convertedData.out
readSampleInfo.out
input_selectFactorsModel
input_selectFactorsModel
findContrastSamples(	input_selectContrast,
colnames(convertedData.out),
readSampleInfo.out,
input_selectFactorsModel,
input_selectModelComprions,
factorReferenceLevels.out,
input_CountsDEGMethod,
input_dataFileFormat
)
colnames(convertedData.out)
input_selectContrast
colnames(convertedData.out)
readSampleInfo.out
input_selectFactorsModel
input_dataFileFormat
input_CountsDEGMethod
factorReferenceLevels.out
input_selectModelComprions
input_selectFactorsModel
