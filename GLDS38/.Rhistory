# enrich.net2, moduleNetwork
library(igraph)
# Stringdb_geneList, StringDB_GO_enrichmentData, stringDB_network1
# StringDB_network_link
library(STRINGdb,verbose=FALSE)
# gagePathwayData
library(gage,verbose=FALSE) # pathway analysis
#fgseaPathwayData
library(fgsea,verbose=FALSE) # fast GSEA
#ReactomePAPathwayData
library(ReactomePA,verbose=FALSE) # pathway analysis
# KeggImage
library(pathview)
# genomePlot, genomePlotDataPre
library(PREDA,verbose=FALSE)  # showing expression on genome
library(PREDAsampledata,verbose=FALSE)
library(hgu133plus2.db,verbose=FALSE)
# biclustering
library(biclust,verbose=FALSE)
if(input_biclustMethod == "BCQU()" )
library(QUBIC,verbose=FALSE) # have trouble installing on Linux
if(input_biclustMethod == "BCUnibic()" )
library(runibic,verbose=FALSE) # Test biclustMethod dependant qubic runibic
# wgcna
library(WGCNA)
library(flashClust,verbose=FALSE)
if(file.exists('iDEP_core_functions.R'))
source('iDEP_core_functions.R') else
source('https://raw.githubusercontent.com/iDEP-SDSU/idep/master/shinyapps/idep/iDEP_core_functions.R')
#Each row of this matrix represents a color scheme;
mycolors = sort(rainbow(20))[c(1,20,10,11,2,19,3,12,4,13,5,14,6,15,7,16,8,17,9,18)]
hmcols <- colorRampPalette(rev(c("#D73027", "#FC8D59", "#FEE090", "#FFFFBF",
"#E0F3F8", "#91BFDB", "#4575B4")))(75)
heatColors = rbind(      greenred(75),     bluered(75),     colorpanel(75,"green","black","magenta"),colorpanel(75,"blue","yellow","red"),hmcols )
rownames(heatColors) = c("Green-Black-Red","Blue-White-Red","Green-Black-Magenta","Blue-Yellow-Red","Blue-white-brown")
inputFile <- 'GLDS38_Expression.csv'
sampleInfoFile <- 'GLDS38_Sampleinfo.csv'
gldsMetadataFile <- 'GLDS38_Metadata.csv'
geneInfoFile <- 'Arabidopsis_thaliana__athaliana_eg_gene_GeneInfo.csv' #Gene symbols, location etc.
geneSetFile <- 'Arabidopsis_thaliana__athaliana_eg_gene.db'  # pathway database in SQL; can be GMT format
STRING10_speciesFile <- 'https://raw.githubusercontent.com/iDEP-SDSU/idep/master/shinyapps/idep/STRING10_species.csv'
input_missingValue_ <- 'geneMedian'	#Missing values imputation method
input_dataFileFormat <- 1	#1- read counts, 2 FKPM/RPKM or DNA microarray (Brake up function?)
input_minCounts_ <- 0.5	#Min counts
input_NminSamples_ <- 1	#Minimum number of samples
input_countsLogStart_ <- 4	#Pseudo count for log CPM
input_CountsTransform_ <- 1	#Methods for data transformation of counts. 1-EdgeR's logCPM 2-VST, 3-rlog
readMetadata.out <- readMetadata(gldsMetadataFile)
library(knitr)   #  install if needed. for showing tables with kable
library(kableExtra)
kable( readMetadata.out ) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
readData.out <- readData(inputFile, input_missingValue=input_missingValue_, input_dataFileFormat = input_dataFileFormat, input_minCounts=input_minCounts_, input_NminSamples = input_NminSamples_, input_countsLogStart=input_countsLogStart_, input_CountsTransform = input_CountsTransform_)
kable( head(readData.out$data) ) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
readSampleInfo.out <- readSampleInfo(sampleInfoFile, readData.out)
kable( readSampleInfo.out ) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
input_selectOrg ="NEW"
input_selectGO <- 'GOBP'	#Gene set category
input_noIDConversion_ = TRUE
allGeneInfo.out <- geneInfo(geneInfoFile)
converted.out_ = NULL
convertedData.out <- convertedData(converted.out=converted.out_, readData.out=readData.out, input_noIDConversion=input_noIDConversion_)
nGenesFilter(readData.out=readData.out, converted.out=converted.out_, convertedData.out=convertedData.out, input_noIDConversion=input_noIDConversion_)
convertedCounts.out <- convertedCounts(readData.out=readData.out, converted.out=converted.out_)  # converted counts, just for compatibility
# Read counts per library
parDefault = par()
par(mar=c(12,4,2,2))
# barplot of total read counts
x <- readData.out$rawCounts
groups = as.factor( detectGroups(colnames(x ) ) )
if(nlevels(groups)<=1 | nlevels(groups) >20 )
col1 = 'green'  else
col1 = rainbow(nlevels(groups))[ groups ]
barplot( colSums(x)/1e6,
col=col1,las=3, main="Total read counts (millions)")
readCountsBias()  # detecting bias in sequencing depth
# Box plot
x = readData.out$data
boxplot(x, las = 2, col=col1,
ylab='Transformed expression levels',
main='Distribution of transformed data')
#Density plot
par(parDefault)
densityPlot()
# Scatter plot of the first two samples
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2],
main='Scatter plot of first two samples')
####plot gene or gene family
input_selectOrg ="BestMatch"
input_geneSearch <- 'HOXA'	#Gene ID for searching
genePlot()
input_useSD <- 'FALSE'	#Use standard deviation instead of standard error in error bar?
geneBarPlotError()
# hierarchical clustering tree
x <- readData.out$data
maxGene <- apply(x,1,max)
# remove bottom 25% lowly expressed genes, which inflate the PPC
x <- x[which(maxGene > quantile(maxGene)[1] ) ,]
plot(as.dendrogram(hclust2( dist2(t(x)))), ylab="1 - Pearson C.C.", type = "rectangle")
#Correlation matrix
input_labelPCC <- TRUE	#Show correlation coefficient?
correlationMatrix()
# Parameters for heatmap
input_nGenes <- 1000	#Top genes for heatmap
input_geneCentering <- TRUE	#centering genes ?
input_sampleCentering <- FALSE	#Center by sample?
input_geneNormalize <- FALSE	#Normalize by gene?
input_sampleNormalize <- FALSE	#Normalize by sample?
input_noSampleClustering <- FALSE	#Use original sample order
input_heatmapCutoff <- 4	#Remove outliers beyond number of SDs
input_distFunctions <- 1	#which distant funciton to use
input_hclustFunctions <- 1	#Linkage type
input_heatColors1 <- 1	#Colors
input_selectFactorsHeatmap <- 'Gravity'	#Sample coloring factors
png('heatmap.png', width = 10, height = 15, units = 'in', res = 300)
staticHeatmap(heatColors)
dev.off()
heatmapPlotly(heatColors) # interactive heatmap using Plotly
input_nGenesKNN <- 2000	#Number of genes fro k-Means
input_nClusters <- 4	#Number of clusters
maxGeneClustering = 12000
input_kmeansNormalization <- 'geneMean'	#Normalization
input_KmeansReRun <- 0	#Random seed
distributionSD()  #Distribution of standard deviations
KmeansNclusters()  #Number of clusters
Kmeans.out = Kmeans()   #Running K-means
KmeansHeatmap(.mycolors = mycolors, .heatColors = heatColors)   #Heatmap for k-Means
#Read gene sets for enrichment analysis
sqlite  <- dbDriver('SQLite')
input_selectGO3 <- 'GOBP'	#Gene set category
input_minSetSize <- 15	#Min gene set size
input_maxSetSize <- 2000	#Max gene set size
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO3,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
# Alternatively, users can use their own GMT files by
#GeneSets.out <- readGMTRobust('somefile.GMT')
results <- KmeansGO()  #Enrichment analysis for k-Means clusters
results$adj.Pval <- format( results$adj.Pval,digits=3 )
kable( results, row.names=FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
input_seedTSNE <- 0	#Random seed for t-SNE
input_colorGenes <- TRUE	#Color genes in t-SNE plot?
tSNEgenePlot()  #Plot genes using t-SNE
input_selectFactors <- 'Gravity'	#Factor coded by color
input_selectFactors2 <- 'Preservation.Method.'	#Factor coded by shape
input_tsneSeed2 <- 0	#Random seed for t-SNE
#PCA, MDS and t-SNE plots
PCAplot()
MDSplot()
tSNEplot()
#Read gene sets for pathway analysis using PGSEA on principal components
input_selectGO6 <- 'GOBP'
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO6,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
PCApathway() # Run PGSEA analysis
cat( PCA2factor() )   #The correlation between PCs with factors
input_CountsDEGMethod <- 3	#DESeq2= 3,limma-voom=2,limma-trend=1
input_limmaPval <- 0.1	#FDR cutoff
input_limmaFC <- 2	#Fold-change cutoff
input_selectModelComprions <- 'Gravity: Microgravity vs. Terrestrial'	#Selected comparisons
input_selectFactorsModel <- 'Gravity'	#Selected comparisons
input_selectInteractions <- NULL 	#Selected comparisons
input_selectBlockFactorsModel <- NULL 	#Selected comparisons
factorReferenceLevels.out <- c('Gravity:Terrestrial')
limma.out <- limma(input_dataFileFormat = input_dataFileFormat, input_countsLogStart = input_countsLogStart_)
DEG.data.out <- DEG.data()
limma.out$comparisons
input_selectComparisonsVenn = limma.out$comparisons[1:3] # use first three comparisons
input_UpDownRegulated <- FALSE	#Split up and down regulated genes
vennPlot() # Venn diagram
sigGeneStats() # number of DEGs as figure
sigGeneStatsTable() # number of DEGs as table
input_selectContrast <- 'Microgravity-Terrestrial'	#Selected comparisons
selectedHeatmap.data.out <- selectedHeatmap.data(.converted.out=converted.out_, .readData.out=readData.out, .input_noIDConversion=input_noIDConversion_)
selectedHeatmap(.mycolors = mycolors, .heatColors = heatColors)   # heatmap for DEGs in selected comparison
# Save gene lists and data into files
write.csv( selectedHeatmap.data(.converted.out=converted.out_, .readData.out=readData.out, .input_noIDConversion=input_noIDConversion_)$genes, 'heatmap.data.csv')
write.csv(DEG.data(),'DEG.data.csv' )
write(AllGeneListsGMT() ,'AllGeneListsGMT.gmt')
input_selectGO2 <- 'GOBP'	#Gene set category
geneListData.out <- geneListData()
volcanoPlot()
scatterPlot()
MAplot()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=6, fig.height=5, fig.align = 'center')
setwd('~/Documents/iDEP/iDEP-GLDS/GLDS38')
input_biclustMethod <- 'BCCC()'
library(RSQLite,verbose=FALSE)	# for database connection
library(gplots,verbose=FALSE)		# for hierarchical clustering
library(ggplot2,verbose=FALSE)	# graphics
library(e1071,verbose=FALSE) 		# computing kurtosis
library(DT,verbose=FALSE) 		# for renderDataTable
library(plotly,verbose=FALSE) 	# for interactive heatmap
library(reshape2,verbose=FALSE) 	# for melt correlation matrix in heatmap
# From Data Read Function
library(edgeR,verbose=FALSE) # count data D.E.
library(DESeq2,verbose=FALSE) # count data analysis, DEG.DESeq2
# TSNE Plot, tSNEgenePlot
library(Rtsne,verbose=FALSE)
# PGSA Pathway PGSEA Pathway, PGSEAplot
library(PGSEA,verbose=FALSE)
# DEG.limma
library(limma,verbose=FALSE) # Differential expression
library(statmod,verbose=FALSE)
# enrichment plot
library(dendextend) # customizing tree
# enrich.net2, moduleNetwork
library(igraph)
# Stringdb_geneList, StringDB_GO_enrichmentData, stringDB_network1
# StringDB_network_link
library(STRINGdb,verbose=FALSE)
# gagePathwayData
library(gage,verbose=FALSE) # pathway analysis
#fgseaPathwayData
library(fgsea,verbose=FALSE) # fast GSEA
#ReactomePAPathwayData
library(ReactomePA,verbose=FALSE) # pathway analysis
# KeggImage
library(pathview)
# genomePlot, genomePlotDataPre
library(PREDA,verbose=FALSE)  # showing expression on genome
library(PREDAsampledata,verbose=FALSE)
library(hgu133plus2.db,verbose=FALSE)
# biclustering
library(biclust,verbose=FALSE)
if(input_biclustMethod == "BCQU()" )
library(QUBIC,verbose=FALSE) # have trouble installing on Linux
if(input_biclustMethod == "BCUnibic()" )
library(runibic,verbose=FALSE) # Test biclustMethod dependant qubic runibic
# wgcna
library(WGCNA)
library(flashClust,verbose=FALSE)
if(file.exists('iDEP_core_functions.R'))
source('iDEP_core_functions.R') else
source('https://raw.githubusercontent.com/iDEP-SDSU/idep/master/shinyapps/idep/iDEP_core_functions.R')
#Each row of this matrix represents a color scheme;
mycolors = sort(rainbow(20))[c(1,20,10,11,2,19,3,12,4,13,5,14,6,15,7,16,8,17,9,18)]
hmcols <- colorRampPalette(rev(c("#D73027", "#FC8D59", "#FEE090", "#FFFFBF",
"#E0F3F8", "#91BFDB", "#4575B4")))(75)
heatColors = rbind(      greenred(75),     bluered(75),     colorpanel(75,"green","black","magenta"),colorpanel(75,"blue","yellow","red"),hmcols )
rownames(heatColors) = c("Green-Black-Red","Blue-White-Red","Green-Black-Magenta","Blue-Yellow-Red","Blue-white-brown")
inputFile <- 'GLDS38_Expression.csv'
sampleInfoFile <- 'GLDS38_Sampleinfo.csv'
gldsMetadataFile <- 'GLDS38_Metadata.csv'
geneInfoFile <- 'Arabidopsis_thaliana__athaliana_eg_gene_GeneInfo.csv' #Gene symbols, location etc.
geneSetFile <- 'Arabidopsis_thaliana__athaliana_eg_gene.db'  # pathway database in SQL; can be GMT format
STRING10_speciesFile <- 'https://raw.githubusercontent.com/iDEP-SDSU/idep/master/shinyapps/idep/STRING10_species.csv'
input_missingValue_ <- 'geneMedian'	#Missing values imputation method
input_dataFileFormat <- 1	#1- read counts, 2 FKPM/RPKM or DNA microarray (Brake up function?)
input_minCounts_ <- 0.5	#Min counts
input_NminSamples_ <- 1	#Minimum number of samples
input_countsLogStart_ <- 4	#Pseudo count for log CPM
input_CountsTransform_ <- 1	#Methods for data transformation of counts. 1-EdgeR's logCPM 2-VST, 3-rlog
readMetadata.out <- readMetadata(gldsMetadataFile)
library(knitr)   #  install if needed. for showing tables with kable
library(kableExtra)
kable( readMetadata.out ) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
readData.out <- readData(inputFile, input_missingValue=input_missingValue_, input_dataFileFormat = input_dataFileFormat, input_minCounts=input_minCounts_, input_NminSamples = input_NminSamples_, input_countsLogStart=input_countsLogStart_, input_CountsTransform = input_CountsTransform_)
kable( head(readData.out$data) ) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
readSampleInfo.out <- readSampleInfo(sampleInfoFile, readData.out)
kable( readSampleInfo.out ) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
input_selectOrg ="NEW"
input_selectGO <- 'GOBP'	#Gene set category
input_noIDConversion_ = TRUE
allGeneInfo.out <- geneInfo(geneInfoFile)
converted.out_ = NULL
convertedData.out <- convertedData(converted.out=converted.out_, readData.out=readData.out, input_noIDConversion=input_noIDConversion_)
nGenesFilter(readData.out=readData.out, converted.out=converted.out_, convertedData.out=convertedData.out, input_noIDConversion=input_noIDConversion_)
convertedCounts.out <- convertedCounts(readData.out=readData.out, converted.out=converted.out_)  # converted counts, just for compatibility
# Read counts per library
parDefault = par()
par(mar=c(12,4,2,2))
# barplot of total read counts
x <- readData.out$rawCounts
groups = as.factor( detectGroups(colnames(x ) ) )
if(nlevels(groups)<=1 | nlevels(groups) >20 )
col1 = 'green'  else
col1 = rainbow(nlevels(groups))[ groups ]
barplot( colSums(x)/1e6,
col=col1,las=3, main="Total read counts (millions)")
readCountsBias()  # detecting bias in sequencing depth
# Box plot
x = readData.out$data
boxplot(x, las = 2, col=col1,
ylab='Transformed expression levels',
main='Distribution of transformed data')
#Density plot
par(parDefault)
densityPlot()
# Scatter plot of the first two samples
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2],
main='Scatter plot of first two samples')
####plot gene or gene family
input_selectOrg ="BestMatch"
input_geneSearch <- 'HOXA'	#Gene ID for searching
genePlot()
input_useSD <- 'FALSE'	#Use standard deviation instead of standard error in error bar?
geneBarPlotError()
# hierarchical clustering tree
x <- readData.out$data
maxGene <- apply(x,1,max)
# remove bottom 25% lowly expressed genes, which inflate the PPC
x <- x[which(maxGene > quantile(maxGene)[1] ) ,]
plot(as.dendrogram(hclust2( dist2(t(x)))), ylab="1 - Pearson C.C.", type = "rectangle")
#Correlation matrix
input_labelPCC <- TRUE	#Show correlation coefficient?
correlationMatrix()
# Parameters for heatmap
input_nGenes <- 1000	#Top genes for heatmap
input_geneCentering <- TRUE	#centering genes ?
input_sampleCentering <- FALSE	#Center by sample?
input_geneNormalize <- FALSE	#Normalize by gene?
input_sampleNormalize <- FALSE	#Normalize by sample?
input_noSampleClustering <- FALSE	#Use original sample order
input_heatmapCutoff <- 4	#Remove outliers beyond number of SDs
input_distFunctions <- 1	#which distant funciton to use
input_hclustFunctions <- 1	#Linkage type
input_heatColors1 <- 1	#Colors
input_selectFactorsHeatmap <- 'Gravity'	#Sample coloring factors
png('heatmap.png', width = 10, height = 15, units = 'in', res = 300)
staticHeatmap(heatColors)
dev.off()
heatmapPlotly(heatColors) # interactive heatmap using Plotly
input_nGenesKNN <- 2000	#Number of genes fro k-Means
input_nClusters <- 4	#Number of clusters
maxGeneClustering = 12000
input_kmeansNormalization <- 'geneMean'	#Normalization
input_KmeansReRun <- 0	#Random seed
distributionSD()  #Distribution of standard deviations
KmeansNclusters()  #Number of clusters
Kmeans.out = Kmeans()   #Running K-means
KmeansHeatmap(.mycolors = mycolors, .heatColors = heatColors)   #Heatmap for k-Means
#Read gene sets for enrichment analysis
sqlite  <- dbDriver('SQLite')
input_selectGO3 <- 'GOBP'	#Gene set category
input_minSetSize <- 15	#Min gene set size
input_maxSetSize <- 2000	#Max gene set size
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO3,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
# Alternatively, users can use their own GMT files by
#GeneSets.out <- readGMTRobust('somefile.GMT')
results <- KmeansGO()  #Enrichment analysis for k-Means clusters
results$adj.Pval <- format( results$adj.Pval,digits=3 )
kable( results, row.names=FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
input_seedTSNE <- 0	#Random seed for t-SNE
input_colorGenes <- TRUE	#Color genes in t-SNE plot?
tSNEgenePlot()  #Plot genes using t-SNE
input_selectFactors <- 'Gravity'	#Factor coded by color
input_selectFactors2 <- 'Preservation.Method.'	#Factor coded by shape
input_tsneSeed2 <- 0	#Random seed for t-SNE
#PCA, MDS and t-SNE plots
PCAplot()
MDSplot()
tSNEplot()
#Read gene sets for pathway analysis using PGSEA on principal components
input_selectGO6 <- 'GOBP'
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO6,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
PCApathway() # Run PGSEA analysis
cat( PCA2factor() )   #The correlation between PCs with factors
input_CountsDEGMethod <- 3	#DESeq2= 3,limma-voom=2,limma-trend=1
input_limmaPval <- 0.1	#FDR cutoff
input_limmaFC <- 2	#Fold-change cutoff
input_selectModelComprions <- 'Gravity: Microgravity vs. Terrestrial'	#Selected comparisons
input_selectFactorsModel <- 'Gravity'	#Selected comparisons
input_selectInteractions <- NULL 	#Selected comparisons
input_selectBlockFactorsModel <- NULL 	#Selected comparisons
factorReferenceLevels.out <- c('Gravity:Terrestrial')
limma.out <- limma(input_dataFileFormat = input_dataFileFormat, input_countsLogStart = input_countsLogStart_)
DEG.data.out <- DEG.data()
limma.out$comparisons
input_selectComparisonsVenn = limma.out$comparisons[1:3] # use first three comparisons
input_UpDownRegulated <- FALSE	#Split up and down regulated genes
vennPlot() # Venn diagram
sigGeneStats() # number of DEGs as figure
sigGeneStatsTable() # number of DEGs as table
input_selectContrast <- 'Microgravity-Terrestrial'	#Selected comparisons
selectedHeatmap.data.out <- selectedHeatmap.data(.converted.out=converted.out_, .readData.out=readData.out, .input_noIDConversion=input_noIDConversion_)
selectedHeatmap(.mycolors = mycolors, .heatColors = heatColors)   # heatmap for DEGs in selected comparison
# Save gene lists and data into files
write.csv( selectedHeatmap.data(.converted.out=converted.out_, .readData.out=readData.out, .input_noIDConversion=input_noIDConversion_)$genes, 'heatmap.data.csv')
write.csv(DEG.data(),'DEG.data.csv' )
write(AllGeneListsGMT() ,'AllGeneListsGMT.gmt')
input_selectGO2 <- 'GOBP'	#Gene set category
geneListData.out <- geneListData()
volcanoPlot()
scatterPlot()
MAplot(.converted.out=converted.out_, .readData.out=readData.out, .input_noIDConversion=input_noIDConversion_)
geneListGOTable.out <- geneListGOTable()
# Read pathway data again
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO2,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
input_removeRedudantSets <- TRUE	#Remove highly redundant gene sets?
results <- geneListGO()  #Enrichment analysis
results$adj.Pval <- format( results$adj.Pval,digits=3 )
kable( results, row.names=FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
STRING10_species = read.csv(STRING10_speciesFile)
ix = grep('Arabidopsis thaliana', STRING10_species$official_name )
findTaxonomyID.out <- STRING10_species[ix,1] # find taxonomyID
findTaxonomyID.out
STRINGdb_geneList.out <- STRINGdb_geneList() #convert gene lists
input_STRINGdbGO <- 'Process'	#'Process', 'Component', 'Function', 'KEGG', 'Pfam', 'InterPro'
results <- stringDB_GO_enrichmentData()  # enrichment using STRING
results$adj.Pval <- format( results$adj.Pval,digits=3 )
kable( results, row.names=FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
input_nGenesPPI <- 100	#Number of top genes for PPI retrieval and analysis
stringDB_network1(1) #Show PPI network
write(stringDB_network_link(), 'PPI_results.html') # write results to html file
browseURL('PPI_results.html') # open in browser
input_selectContrast1 <- 'Microgravity-Terrestrial'	#select Comparison
#input_selectContrast1 = limma.out$comparisons[3] # manually set
input_selectGO <- 'GOBP'	#Gene set category
#input_selectGO='custom' # if custom gmt file
input_minSetSize <- 15	#Min size for gene set
input_maxSetSize <- 2000	#Max size for gene set
# Read pathway data again
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
input_pathwayPvalCutoff <- 0.2	#FDR cutoff
input_nPathwayShow <- 30	#Top pathways to show
input_absoluteFold <- FALSE	#Use absolute values of fold-change?
input_GenePvalCutoff <- 1	#FDR to remove genes
input_pathwayMethod = 1  # 1  GAGE
gagePathwayData.out <- gagePathwayData()  # pathway analysis using GAGE
results <- gagePathwayData.out  #Enrichment analysis for k-Means clusters
results$adj.Pval <- format( results$adj.Pval,digits=3 )
kable( results, row.names=FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
pathwayListData.out = pathwayListData()
enrichmentPlot(pathwayListData.out, 25  )
enrichmentNetwork(pathwayListData.out )
enrichmentNetworkPlotly(pathwayListData.out)
input_pathwayMethod = 3  # 1  fgsea
fgseaPathwayData.out <- fgseaPathwayData() #Pathway analysis using fgsea
results <- fgseaPathwayData.out  #Enrichment analysis for k-Means clusters
results$adj.Pval <- format( results$adj.Pval,digits=3 )
kable( results, row.names=FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
pathwayListData.out = pathwayListData()
enrichmentPlot(pathwayListData.out, 25, mycolors)
enrichmentNetwork(pathwayListData.out )
enrichmentNetworkPlotly(pathwayListData.out)
PGSEAplot() # pathway analysis using PGSEA
input_selectContrast2 <- 'Microgravity-Terrestrial'	#select Comparison
#input_selectContrast2 = limma.out$comparisons[3] # manually set
input_limmaPvalViz <- 0.1	#FDR to filter genes
input_limmaFCViz <- 2	#FDR to filter genes
genomePlotly() # shows fold-changes on the genome
input_nGenesBiclust <- 1000	#Top genes for biclustering
input_biclustMethod <- 'BCCC()'	#Method: 'BCCC', 'QUBIC', 'runibic' ...
biclustering.out = biclustering()  # run analysis
input_selectBicluster <- 1	#select a cluster
biclustHeatmap(heatColors)   # heatmap for selected cluster
input_selectGO4 <- 'GOBP'	#Gene set category
# Read pathway data again
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO4,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
results <- geneListBclustGO()  #Enrichment analysis for k-Means clusters
results$adj.Pval <- format( results$adj.Pval,digits=3 )
kable( results, row.names=FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
input_mySoftPower <- 5	#SoftPower to cutoff
input_nGenesNetwork <- 1000	#Number of top genes
input_minModuleSize <- 20	#Module size minimum
wgcna.out = wgcna()   # run WGCNA
softPower()  # soft power curve
modulePlot()  # plot modules
listWGCNA.Modules.out = listWGCNA.Modules() #modules
input_selectGO5 <- 'GOBP'	#Gene set category
# Read pathway data again
GeneSets.out <-readGeneSets( geneSetFile,
convertedData.out, input_selectGO5,input_selectOrg,
c(input_minSetSize, input_maxSetSize)  )
input_selectWGCNA.Module <- 'Entire network'	#Select a module
input_topGenesNetwork <- 10	#SoftPower to cutoff
input_edgeThreshold <- 0.4	#Number of top genes
moduleNetwork(input_noIDConversion=input_noIDConversion_)	# show network of top genes in selected module
input_removeRedudantSets <- TRUE	#Remove redundant gene sets
results <- networkModuleGO()  #Enrichment analysis of selected module
results$adj.Pval <- format( results$adj.Pval,digits=3 )
kable( results, row.names=FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width = "100%")
